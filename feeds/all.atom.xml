<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stefano Apostolico's Blog</title><link href="http://stefanoapostolico.com/" rel="alternate"></link><link href="http://stefanoapostolico.com/feeds/all.atom.xml" rel="self"></link><id>http://stefanoapostolico.com/</id><updated>2014-12-07T00:00:00+01:00</updated><entry><title>Handle CSRF token in Locust test</title><link href="http://stefanoapostolico.com/2014/12/07/hande-csrf-token-in-locust-test.html" rel="alternate"></link><updated>2014-12-07T00:00:00+01:00</updated><author><name>Stefano Apostolico</name></author><id>tag:stefanoapostolico.com,2014-12-07:2014/12/07/hande-csrf-token-in-locust-test.html</id><summary type="html">&lt;p&gt;Locust and Django CSRF&lt;/p&gt;

&lt;p&gt;Simple solution to handle Django 
&lt;a href="https://docs.djangoproject.com/en/dev/ref/csrf/"&gt;Cross Site Request Forgery protection&lt;/a&gt;
into &lt;a href="http://locust.io/"&gt;Locust&lt;/a&gt; load tests&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/auth/login/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;csrftoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'csrftoken'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/auth/login/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                                    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"X-CSRFToken"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;csrftoken&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebsiteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://localhost:8000'&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserBehavior&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="locust"></category><category term="performance"></category><category term="django"></category></entry><entry><title>Don't put the socks in the fridge</title><link href="http://stefanoapostolico.com/2014/11/30/dont-put-the-socks-in-the-fridge.html" rel="alternate"></link><updated>2014-11-30T00:00:00+01:00</updated><author><name>Stefano Apostolico</name></author><id>tag:stefanoapostolico.com,2014-11-30:2014/11/30/dont-put-the-socks-in-the-fridge.html</id><summary type="html">&lt;p&gt;In response to a set of recommendations I was presenting about an Enterprise 
Java solution architecture, a CTO once asked me: 
&lt;em&gt;"Yeah, we've got this 2 GB EAR with 400+ WAR deployments inside. 
So what's the problem? The system still is completely functional!"&lt;/em&gt;. 
My instant feeling was 
&lt;em&gt;"Ok, this CTO himself is a much bigger problem than this EAR!"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A few years ago, I was in India to train developers of a local IT company. 
It was a great experience - I met a lot of wonderful people there, few of whom 
I'm still in touch with. Many of them were good developers, working hard with a hunger 
to learn their subjects deeply at work. Much of the focus in my sessions was on practices 
of designing large scale object-oriented systems. In a conversation about core design 
principles, during a rapid fire response, I submitted to them this idea - 
&lt;em&gt;"Yes, you can put the socks in the fridge, but choose NOT to put it there!"&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;My intent was to explain that when you design there is a place for everything, and sometimes a written rule or law is not needed to feel that something is wrongly placed (beyond principles of High Cohesion and Least Surprise, there is common sense, fundamental cleanliness to respect). The metaphor resonated with them instantly - they immediately understood the principle without any further debate. &lt;/p&gt;
&lt;p&gt;At that time I had no idea how many times I would have to use it again and again!&lt;/p&gt;
&lt;p&gt;In further years, I found it very frustrating when people claiming to be technical leads and architects taking the stand of "it isn't wrong if there's no rule that says so", like "no rule says you can't mix SQL with HTML markup" or "no rule says you can't use spaces for the dictionary keys for a REST API". Much effort to make them see beyond the need of defining rules for everything - with long explanations about the innumerable risks in such design - were mostly futile. They'd rather stick to approved rules than take a lead or leap of faith in common sense.&lt;/p&gt;
&lt;p&gt;When you find yourself submitting an idea or approach widely shared by the community as a convention (with profound logic behind it that you know and understand), only to be countered by your audience saying "Show me the rule defining so" - take a hint and end the discussion as soon as possible. I've come to understand that such resistance doesn't come from the unfamiliarity of the topic - but from the gap between the interlocutors from a technical standpoint and more seriously, the values standpoint. &lt;/p&gt;
&lt;p&gt;It's not about fighting, but it's about choosing your fights!&lt;/p&gt;</summary></entry><entry><title>Playing with Pelican</title><link href="http://stefanoapostolico.com/2014/11/27/playing-with-pelican.html" rel="alternate"></link><updated>2014-11-27T00:00:00+01:00</updated><author><name>Stefano Apostolico</name></author><id>tag:stefanoapostolico.com,2014-11-27:2014/11/27/playing-with-pelican.html</id><summary type="html">&lt;p&gt;I spent one day trying to put this blog on Heroku.
Googling on the web many authors explain how to create a static site on Heroku,
and Pelican web site offer a ready to use
&lt;a href="http://blog.getpelican.com/using-pelican-with-heroku.html"&gt;buildpack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway I did not like any of these solutions as all of them
seem recompile and install the full stack (nginx, pelican, python....)&lt;/p&gt;
&lt;p&gt;I moved to a more pratical and easy to implement solution:
&lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt; and &lt;a href="http://docs.getpelican.com/en/3.5.0"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;To install Pelican and other Python package dependencies in a virtual environment, 
I followed the instructions in the official 
&lt;a href="http://pelican.readthedocs.org/en/3.5.0/quickstart.html"&gt;Pelican documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican Markdown typogrify
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I enabled article pagination so that I didn't end up with all the posts on a single 
page. The &lt;code&gt;Makefile&lt;/code&gt; is incredibly useful, so I enabled that. 
It allows you to compile the website with &lt;code&gt;make html&lt;/code&gt; and check it live with &lt;code&gt;make serve&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Because I want to use Github pages I answered NO to all the questions about
&lt;code&gt;Dropbox&lt;/code&gt;, &lt;code&gt;S3&lt;/code&gt;, &lt;code&gt;FTP&lt;/code&gt; and &lt;code&gt;SSH&lt;/code&gt; anyway the related code is still 
in the &lt;code&gt;Makefile&lt;/code&gt; so I removed it manually.&lt;/p&gt;
&lt;h3&gt;Configure plugins&lt;/h3&gt;
&lt;p&gt;To configure plugins simply clone pelican-plugins as git submodule with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add submodule https://github.com/getpelican/pelican-plugins
git submodule update  --init --recursive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and enable what you like in &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pelican-plugins'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'interlinks'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;'pelican_fontawesome'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;'related_posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;'summary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;'simple_footnotes'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Configure Github&lt;/h3&gt;
&lt;p&gt;For Github you need to put the domain of your site inside a CNAME (must be uppercase)
file at the root of your site. &lt;/p&gt;
&lt;p&gt;More details how to configure your domain can be found 
&lt;a href="http://docs.getpelican.com/en/3.5.0/tips.html#extra-tips"&gt;here&lt;/a&gt; (Tip #2),
&lt;a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/"&gt;here&lt;/a&gt;
and &lt;a href="https://help.github.com/articles/my-custom-domain-isn-t-working/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For my configuration I used &lt;/p&gt;
&lt;p&gt;&lt;code&gt;content/extras/CNAME&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;stefanoapostolico.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'extras/README.rst'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'extras/CNAME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'extras/robots.txt'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'extras/README.rst'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'README.rst'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'extras/CNAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'CNAME'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'extras/robots.txt'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'robots.txt'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Minor improvements&lt;/h3&gt;
&lt;h4&gt;Get metadata from path&lt;/h4&gt;
&lt;p&gt;To store articles in a structure like 
&lt;code&gt;category/YEAR/MONTH/DAY-slug&lt;/code&gt; so I updated my &lt;code&gt;pelicanconf.py&lt;/code&gt; as &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'\A(?P&amp;lt;category&amp;gt;[^/]+)/(?P&amp;lt;date&amp;gt;\d{4}/\d{2}/\d{2})-(?P&amp;lt;slug&amp;gt;.*)(.md|.rst)'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can always override date, slug and category in your post.&lt;/p&gt;
&lt;h4&gt;Serve file with different path&lt;/h4&gt;
&lt;p&gt;To serve your articles with url like &lt;code&gt;/YEAR/MONTH/DAY/slug.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}.html'&lt;/span&gt;
    &lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}.html'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must set both the setting.&lt;/p&gt;
&lt;p&gt;you can see the result &lt;a href="https://github.com/saxix/stefanoapostolico.com"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category><category term="github pages"></category></entry><entry><title>Start blogging</title><link href="http://stefanoapostolico.com/2014/11/22/start-blogging.html" rel="alternate"></link><updated>2014-11-22T00:00:00+01:00</updated><author><name>Stefano Apostolico</name></author><id>tag:stefanoapostolico.com,2014-11-22:2014/11/22/start-blogging.html</id><summary type="html">&lt;p&gt;After years spent to coding and getting benefits from someone else blog,
I decided to have my own one.&lt;/p&gt;

&lt;p&gt;Probably because I'm not comfortable to write in english, 
or only laziness I spent most of my time sharing my experience by voice with friends, 
colleagues and coders around the world.&lt;/p&gt;
&lt;p&gt;Anyway as I have been able to work in four continents, 
probably people take care more what I can say and less in my ability to 
manage English language.&lt;/p&gt;
&lt;p&gt;Today I have more free time and desire to share, so I started my personal blog.&lt;/p&gt;</summary></entry></feed>